import os, subprocess, pathlib, sys

BASE_DIR = pathlib.Path(__file__).resolve().parent
REPO_URL = os.environ.get("GIT_REMOTE_URL", "https://github.com/malekoweis/content-automation.git")
GH_TOKEN = os.environ.get("GH_TOKEN")

def run(cmd, check=True):
    print("+", " ".join(cmd), flush=True)
    return subprocess.run(cmd, cwd=str(BASE_DIR), check=check)

def ensure_remote():
    run(["git", "init"])
    remotes = subprocess.check_output(["git", "remote"], cwd=str(BASE_DIR)).decode().split()
    if "origin" not in remotes:
        url = REPO_URL
        if GH_TOKEN and url.startswith("https://"):
            url = url.replace("https://", f"https://{GH_TOKEN}@")
        run(["git", "remote", "add", "origin", url], check=False)
    else:
        if GH_TOKEN:
            url = REPO_URL.replace("https://", f"https://{GH_TOKEN}@")
            run(["git", "remote", "set-url", "origin", url], check=False)

def set_identity():
    user = os.environ.get("GIT_AUTHOR_NAME", "automation-bot")
    email = os.environ.get("GIT_AUTHOR_EMAIL", "bot@example.com")
    run(["git", "config", "user.name", user], check=False)
    run(["git", "config", "user.email", email], check=False)

def main():
    if not GH_TOKEN:
        print("ERROR: GH_TOKEN env var is not set.", file=sys.stderr)
        sys.exit(1)

    ensure_remote()
    set_identity()

    run(["git", "add", "-A"], check=False)
    status = subprocess.check_output(["git", "status", "--porcelain"], cwd=str(BASE_DIR)).decode().strip()
    if status:
        run(["git", "commit", "-m", "Automated update"], check=False)
    else:
        print("No changes to commit.")

    branches = subprocess.check_output(["git", "branch", "--list"], cwd=str(BASE_DIR)).decode()
    if "main" not in branches:
        run(["git", "checkout", "-B", "main"], check=False)
    else:
        run(["git", "checkout", "main"], check=False)

    run(["git", "pull", "origin", "main", "--rebase"], check=False)
    run(["git", "push", "origin", "main"], check=False)
    print("Push complete.")

if __name__ == "__main__":
    main()
